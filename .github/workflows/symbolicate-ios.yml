name: Symbolicate crash log
# Manual “Run workflow” button only – never triggers on push
on:
  workflow_dispatch:

jobs:
  symbolicate:
    runs-on: macos-13     # free macOS runner

    steps:
    # 1 ▸ pull the repo (so we get crashlogs/ + dsym/)
    - uses: actions/checkout@v4

    # 2 ▸ sanity-check that both files exist
    - name: Verify inputs
      id: verify
      run: |
        LOG=$(ls crashlogs/*.{ips,crash} 2>/dev/null | head -n1 || true)
        if [ -z "$LOG" ]; then
          echo "::error ::No .ips or .crash file found in crashlogs/"; exit 1
        fi
        DSYM=$(find dsym -name '*.dSYM' -maxdepth 2 | head -n1 || true)
        if [ -z "$DSYM" ]; then
          echo "::error ::No .dSYM bundle found in dsym/"; exit 1
        fi
        echo "LOG=$LOG"   >> $GITHUB_ENV
        echo "DSYM=$DSYM" >> $GITHUB_ENV
        echo "Found log:  $LOG"
        echo "Found dSYM: $DSYM"

    # 3 ▸ locate symbolicatecrash inside the installed Xcode (Xcode 15+ no longer
    #     exposes it via xcrun, so we search once)
    - name: Locate symbolicatecrash
      id: tool
      run: |
        TOOL=$(find "$(xcode-select -p)" -name symbolicatecrash -type f | head -n1)
        if [ -z "$TOOL" ]; then
          echo "::error ::symbolicatecrash script not found inside $(xcode-select -p)"; exit 1
        fi
        echo "TOOL=$TOOL" >> $GITHUB_ENV
        echo "Using $TOOL"

    # 4 ▸ run the symbolication
    - name: Symbolicate
      run: |
        "$TOOL" "$LOG" "$DSYM" > crash.symbolicated
        echo "Created crash.symbolicated"

    # 5 ▸ hand the readable stack trace back to you
    - uses: actions/upload-artifact@v4
      with:
        name: symbolicated-crash
        path: crash.symbolicated
